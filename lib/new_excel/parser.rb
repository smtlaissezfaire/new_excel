#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
module NewExcel
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 104)

  def parse(str)
    @q = Tokenizer.get_tokens(str)
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(*args)
    $stderr.puts "on_error called: args=#{args.inspect}"
    super
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     7,    24,    16,    10,    17,    18,    19,    20,    24,
    16,    10,    17,    18,    19,    20,    51,    16,    31,    17,
    18,    19,    20,    31,    37,    17,    18,    19,    20,    37,
    17,    18,    19,    20,    31,    41,    49,    50,    42,    25,
    37,    17,    18,    19,    20,    21,    38 ]

racc_action_check = [
     0,     0,    22,     9,     0,     9,     9,     9,     9,     6,
     0,    24,     0,     0,     0,     0,    44,    24,    51,    24,
    24,    24,    24,    10,    51,    51,    51,    51,    51,    10,
    10,    10,    10,    10,    41,    31,    42,    43,    31,     7,
    41,    41,    41,    41,    41,     1,    21 ]

racc_action_pointer = [
    -2,    45,   nil,   nil,   nil,   nil,     4,    35,   nil,    -9,
    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    46,    -3,   nil,     5,   nil,   nil,   nil,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    29,    28,     6,   nil,   nil,   nil,   nil,   nil,
   nil,    11,   nil ]

racc_action_default = [
   -42,   -42,    -1,    -2,    -3,    -4,   -42,   -42,   -10,   -11,
   -42,   -31,   -32,   -33,   -34,   -35,   -36,   -38,   -39,   -40,
   -41,   -42,    -5,    -8,   -42,    -6,   -30,   -12,   -13,   -14,
   -15,   -42,   -25,   -26,   -27,   -28,   -29,   -37,    53,    -7,
    -9,   -17,   -42,   -42,   -18,   -20,   -21,   -22,   -23,   -24,
   -16,   -42,   -19 ]

racc_goto_table = [
    33,    34,    35,    36,     3,    23,    45,    29,    30,    43,
    44,     1,    26,     2,     4,     5,    52,    22,    27,    28,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,    33,    34,    35,    36,   nil,   nil,   nil,   nil,   nil,
   nil,    33,    34,    35,    36 ]

racc_goto_check = [
    18,    19,    20,    21,     3,     7,    16,    12,    13,    14,
    15,     1,    22,     2,     4,     5,    16,     6,    10,    11,
   nil,     7,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,    18,    19,    20,    21,   nil,   nil,   nil,   nil,   nil,
   nil,    18,    19,    20,    21 ]

racc_goto_pointer = [
   nil,    11,    13,     4,    14,    15,    11,    -1,   nil,   nil,
     8,     9,    -3,    -2,   -32,   -31,   -35,   nil,   -10,    -9,
    -8,    -7,     3 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,     9,
   nil,    46,    47,    48,   nil,   nil,   nil,    32,    12,    13,
    15,    14,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  2, 22, :_reduce_5,
  2, 23, :_reduce_6,
  2, 24, :_reduce_7,
  1, 24, :_reduce_8,
  2, 25, :_reduce_9,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  2, 26, :_reduce_12,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  4, 29, :_reduce_16,
  0, 32, :_reduce_none,
  1, 32, :_reduce_18,
  3, 33, :_reduce_19,
  1, 33, :_reduce_20,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  3, 30, :_reduce_24,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  2, 27, :_reduce_30,
  1, 27, :_reduce_31,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 35, :_reduce_37,
  1, 36, :_reduce_38,
  1, 37, :_reduce_39,
  1, 39, :_reduce_40,
  1, 38, :_reduce_41 ]

racc_reduce_n = 42

racc_shift_n = 53

racc_token_table = {
  false => 0,
  :error => 1,
  :MAP => 2,
  :DATA_FILE => 3,
  :DATA_FILE_CONTENTS => 4,
  :KEY_WITH_COLON => 5,
  :EQ => 6,
  :ID => 7,
  :OPEN_PAREN => 8,
  :CLOSE_PAREN => 9,
  :COMMA => 10,
  :DOT => 11,
  :TEXT => 12,
  :QUOTED_STRING => 13,
  :DATE_TIME => 14,
  :TIME => 15,
  :FLOAT => 16,
  :INTEGER => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "MAP",
  "DATA_FILE",
  "DATA_FILE_CONTENTS",
  "KEY_WITH_COLON",
  "EQ",
  "ID",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "COMMA",
  "DOT",
  "TEXT",
  "QUOTED_STRING",
  "DATE_TIME",
  "TIME",
  "FLOAT",
  "INTEGER",
  "$start",
  "root",
  "file",
  "cell_contents",
  "map_file",
  "data_file",
  "key_value_pairs",
  "key_value_pair",
  "formula",
  "primitive",
  "formula_body",
  "function_call",
  "remote_cell_reference",
  "primitive_value",
  "function_body",
  "function_arguments",
  "function_argument",
  "quoted_string",
  "datetime",
  "time",
  "integer",
  "float",
  "any_primitive_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
        result = val[1]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_6(val, _values, result)
        ref = AST::DataFile.new(val.join)
    ref.body = val[1]
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_7(val, _values, result)
        ref = val[0]
    ref.add_pair(val[1])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_8(val, _values, result)
        ref = AST::Map.new(val.join)
    ref.add_pair(val[0])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values, result)
        ref = AST::KeyValuePair.new(val.join)
    key_with_colon = val[0]
    key_without_colon = key_with_colon[0..(key_with_colon.length-2)]

    ref.hash_key = key_without_colon.to_sym
    ref.hash_value = val[1]
    result = ref
  
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_12(val, _values, result)
        ref = AST::FormulaBody.new(val.join)
    ref.body = val[1]
    result = ref
  
    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_16(val, _values, result)
        ref = AST::FunctionCall.new(val.join)
    ref.name = val[0]
    ref.arguments = Array(val[2]).compact.flatten
    result = ref
  
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_18(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_19(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_24(val, _values, result)
          ref = AST::CellReference.new(val.join)
      ref.sheet_name = val[0]
      ref.cell_name = val[2]
      result = ref
    
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_30(val, _values, result)
          strings = val.map do |v|
        v.respond_to?(:string) ? v.string : v
      end

      result = AST::UnquotedString.new(strings.join)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_31(val, _values, result)
          ref = if val[0].is_a?(AST::BaseAST)
        val[0]
      else
        AST::UnquotedString.new(val.join)
      end

      result = ref
    
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_37(val, _values, result)
     result = AST::QuotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_38(val, _values, result)
     result = AST::DateTime.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_39(val, _values, result)
     result = AST::UnquotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_40(val, _values, result)
     result = AST::PrimitiveFloat.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_41(val, _values, result)
     result = AST::PrimitiveInteger.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module NewExcel
