#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
module NewExcel
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 98)

  def parse(str)
    @q = Tokenizer.get_tokens(str)
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(*args)
    $stderr.puts "on_error called: args=#{args.inspect}"
    super
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    14,     8,    15,    16,    17,    18,    19,    14,     8,
    15,    16,    17,    18,    22,    14,    28,    15,    16,    17,
    18,    28,    34,    15,    16,    17,    18,    34,    15,    16,
    17,    18,    28,    38,    22,    46,    39,    47,    34,    15,
    16,    17,    18,    48,    35 ]

racc_action_check = [
     0,     7,     0,     7,     7,     7,     7,     1,     0,    22,
     0,     0,     0,     0,     5,    22,    38,    22,    22,    22,
    22,     8,    38,    38,    38,    38,    38,     8,     8,     8,
     8,     8,    48,    28,    20,    39,    28,    40,    48,    48,
    48,    48,    48,    41,    19 ]

racc_action_pointer = [
    -2,     7,   nil,   nil,   nil,    11,   nil,    -9,    16,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
    31,   nil,     5,   nil,   nil,   nil,   nil,   nil,    27,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,    30,
    30,    35,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil ]

racc_action_default = [
   -40,   -40,    -1,    -2,    -3,   -40,    -8,    -9,   -40,   -29,
   -30,   -31,   -32,   -33,   -34,   -36,   -37,   -38,   -39,   -40,
    -4,    -6,   -40,   -28,   -10,   -11,   -12,   -13,   -40,   -23,
   -24,   -25,   -26,   -27,   -35,    50,    -5,    -7,   -15,   -40,
   -40,   -16,   -18,   -19,   -20,   -21,   -22,   -14,   -40,   -17 ]

racc_goto_table = [
    30,    31,    32,    33,     3,    21,    42,    27,    40,    41,
     1,    23,     2,     4,    20,    24,    49,    25,    26,   nil,
    36,   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,
    30,    31,    32,    33,   nil,   nil,   nil,   nil,   nil,   nil,
    30,    31,    32,    33 ]

racc_goto_check = [
    17,    18,    19,    20,     3,     6,    15,    12,    13,    14,
     1,    21,     2,     4,     5,     9,    15,    10,    11,   nil,
     6,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
    17,    18,    19,    20,   nil,   nil,   nil,   nil,   nil,   nil,
    17,    18,    19,    20 ]

racc_goto_pointer = [
   nil,    10,    12,     4,    13,     9,     0,   nil,   nil,     7,
     9,    10,    -1,   -30,   -29,   -32,   nil,    -8,    -7,    -6,
    -5,     4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,     7,   nil,
    43,    44,    45,   nil,   nil,   nil,    29,    10,    11,    13,
    12,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 18, :_reduce_none,
  2, 20, :_reduce_4,
  2, 21, :_reduce_5,
  1, 21, :_reduce_6,
  2, 22, :_reduce_7,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  2, 23, :_reduce_10,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  4, 26, :_reduce_14,
  0, 29, :_reduce_none,
  1, 29, :_reduce_16,
  3, 30, :_reduce_17,
  1, 30, :_reduce_18,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  3, 27, :_reduce_22,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  2, 24, :_reduce_28,
  1, 24, :_reduce_29,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 32, :_reduce_35,
  1, 33, :_reduce_36,
  1, 34, :_reduce_37,
  1, 36, :_reduce_38,
  1, 35, :_reduce_39 ]

racc_reduce_n = 40

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :MAP => 2,
  :KEY_WITH_COLON => 3,
  :EQ => 4,
  :ID => 5,
  :OPEN_PAREN => 6,
  :CLOSE_PAREN => 7,
  :COMMA => 8,
  :DOT => 9,
  :TEXT => 10,
  :QUOTED_STRING => 11,
  :DATE_TIME => 12,
  :TIME => 13,
  :FLOAT => 14,
  :INTEGER => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "MAP",
  "KEY_WITH_COLON",
  "EQ",
  "ID",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "COMMA",
  "DOT",
  "TEXT",
  "QUOTED_STRING",
  "DATE_TIME",
  "TIME",
  "FLOAT",
  "INTEGER",
  "$start",
  "root",
  "file",
  "cell_contents",
  "map",
  "key_value_pairs",
  "key_value_pair",
  "formula",
  "primitive",
  "formula_body",
  "function_call",
  "remote_cell_reference",
  "primitive_value",
  "function_body",
  "function_arguments",
  "function_argument",
  "quoted_string",
  "datetime",
  "time",
  "integer",
  "float",
  "any_primitive_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
        result = val[1]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_5(val, _values, result)
        ref = val[0]
    ref.add_pair(val[1])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_6(val, _values, result)
        ref = AST::Map.new(val.join)
    ref.add_pair(val[0])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_7(val, _values, result)
        ref = AST::KeyValuePair.new(val.join)
    key_with_colon = val[0]
    key_without_colon = key_with_colon[0..(key_with_colon.length-2)]

    ref.hash_key = key_without_colon.to_sym
    ref.hash_value = val[1]
    result = ref
  
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_10(val, _values, result)
        ref = AST::FormulaBody.new(val.join)
    ref.body = val[1]
    result = ref
  
    result
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_14(val, _values, result)
        ref = AST::FunctionCall.new(val.join)
    ref.name = val[0]
    ref.arguments = Array(val[2]).compact.flatten
    result = ref
  
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_16(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_17(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_22(val, _values, result)
          ref = AST::CellReference.new(val.join)
      ref.sheet_name = val[0]
      ref.cell_name = val[2]
      result = ref
    
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_28(val, _values, result)
          strings = val.map do |v|
        v.respond_to?(:string) ? v.string : v
      end

      result = AST::UnquotedString.new(strings.join)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_29(val, _values, result)
          ref = if val[0].is_a?(AST::BaseAST)
        val[0]
      else
        AST::UnquotedString.new(val.join)
      end

      result = ref
    
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_35(val, _values, result)
     result = AST::QuotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_36(val, _values, result)
     result = AST::DateTime.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_37(val, _values, result)
     result = AST::UnquotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_38(val, _values, result)
     result = AST::PrimitiveFloat.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_39(val, _values, result)
     result = AST::PrimitiveInteger.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module NewExcel
