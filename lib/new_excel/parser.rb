#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
module NewExcel
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 136)

  def parse(str)
    @q = Tokenizer.get_tokens(str)
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(*args)
    $stderr.puts "on_error called: args=#{args.inspect}"
    super
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     7,    22,    51,    25,    10,    52,    47,    59,    60,
    61,    25,    17,    18,    19,    20,    21,    17,    18,    19,
    20,    21,    49,    17,    18,    19,    20,    21,    44,    10,
   nil,    17,    18,    19,    20,    21,    17,    18,    19,    20,
    21,    37,   nil,   nil,   nil,   nil,    43,    17,    18,    19,
    20,    37,   nil,   nil,   nil,   nil,    43,    17,    18,    19,
    20,    37,   nil,   nil,   nil,   nil,    43,    17,    18,    19,
    20,    17,    18,    19,    20,    21 ]

racc_action_check = [
     0,     0,     1,    37,    23,     0,    37,    27,    52,    53,
    54,     6,     0,     0,     0,     0,     0,    27,    27,    27,
    27,    27,    29,     9,     9,     9,     9,     9,    22,    25,
   nil,    29,    29,    29,    29,    29,    25,    25,    25,    25,
    25,    51,   nil,   nil,   nil,   nil,    51,    51,    51,    51,
    51,    10,   nil,   nil,   nil,   nil,    10,    10,    10,    10,
    10,    61,   nil,   nil,   nil,   nil,    61,    61,    61,    61,
    61,     7,     7,     7,     7,     7 ]

racc_action_pointer = [
    -2,     2,   nil,   nil,   nil,   nil,     5,    57,   nil,     9,
    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28,    -2,   nil,    22,   nil,     3,   nil,    17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33,     0,    -1,    -1,   nil,   nil,   nil,   nil,   nil,
   nil,    53,   nil ]

racc_action_default = [
   -50,   -50,    -1,    -2,    -3,    -4,   -50,   -50,   -17,   -18,
   -50,   -38,   -39,   -40,   -41,   -42,   -43,   -45,   -46,   -47,
   -48,   -49,   -50,    -5,   -15,   -50,    -6,   -50,    -9,   -50,
   -12,   -13,   -37,   -19,   -20,   -21,   -22,   -50,   -32,   -33,
   -34,   -35,   -36,   -44,    63,   -14,   -16,    -7,    -8,   -10,
   -11,   -24,   -50,   -50,   -25,   -27,   -28,   -29,   -30,   -31,
   -23,   -50,   -26 ]

racc_goto_table = [
    42,    41,    40,    39,     3,    11,    28,    24,    55,    50,
    26,     1,    33,    34,    32,    35,    36,    53,    62,    54,
    23,     5,     4,    27,    45,     2,    48,   nil,   nil,    46,
    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,    41,    40,    39,   nil,   nil,   nil,   nil,   nil,
   nil,    42,    41,    40,    39 ]

racc_goto_check = [
    27,    26,    25,    24,     3,    12,     9,    13,    22,    11,
     7,     1,    16,    17,    12,    18,    19,    20,    22,    21,
     6,     5,     4,     8,    13,     2,     9,   nil,   nil,     3,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    26,    25,    24,   nil,   nil,   nil,   nil,   nil,
   nil,    27,    26,    25,    24 ]

racc_goto_pointer = [
   nil,    11,    25,     4,    22,    21,    14,     3,    16,    -1,
   nil,   -20,     5,     1,   nil,   nil,     2,     3,     5,     6,
   -34,   -32,   -43,   nil,    -7,    -8,    -9,   -10,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,    30,    31,   nil,     8,     9,   nil,    56,    57,    58,
   nil,   nil,   nil,    38,    12,    13,    15,    14,    16 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  2, 23, :_reduce_5,
  2, 24, :_reduce_6,
  2, 26, :_reduce_7,
  2, 27, :_reduce_8,
  1, 27, :_reduce_9,
  2, 28, :_reduce_10,
  2, 29, :_reduce_11,
  1, 29, :_reduce_12,
  1, 30, :_reduce_13,
  2, 25, :_reduce_14,
  1, 25, :_reduce_15,
  2, 32, :_reduce_16,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  2, 33, :_reduce_19,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  4, 36, :_reduce_23,
  0, 39, :_reduce_none,
  1, 39, :_reduce_25,
  3, 40, :_reduce_26,
  1, 40, :_reduce_27,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  3, 37, :_reduce_31,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  2, 34, :_reduce_37,
  1, 34, :_reduce_38,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 42, :_reduce_44,
  1, 43, :_reduce_45,
  1, 44, :_reduce_46,
  1, 46, :_reduce_47,
  1, 45, :_reduce_48,
  1, 47, :_reduce_49 ]

racc_reduce_n = 50

racc_shift_n = 63

racc_token_table = {
  false => 0,
  :error => 1,
  :MAP => 2,
  :DATA_FILE => 3,
  :CSV_END_OF_FILE => 4,
  :CSV_END_OF_ROW => 5,
  :KEY_WITH_COLON => 6,
  :EQ => 7,
  :ID => 8,
  :OPEN_PAREN => 9,
  :CLOSE_PAREN => 10,
  :COMMA => 11,
  :DOT => 12,
  :QUOTED_STRING => 13,
  :DATE_TIME => 14,
  :TIME => 15,
  :FLOAT => 16,
  :INTEGER => 17,
  :TEXT => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "MAP",
  "DATA_FILE",
  "CSV_END_OF_FILE",
  "CSV_END_OF_ROW",
  "KEY_WITH_COLON",
  "EQ",
  "ID",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "COMMA",
  "DOT",
  "QUOTED_STRING",
  "DATE_TIME",
  "TIME",
  "FLOAT",
  "INTEGER",
  "TEXT",
  "$start",
  "root",
  "file",
  "cell_contents",
  "map_file",
  "data_file",
  "key_value_pairs",
  "csv_file_contents",
  "csv_file_body",
  "csv_row",
  "csv_cells",
  "csv_cell",
  "any_primitive_type",
  "key_value_pair",
  "formula",
  "primitive",
  "formula_body",
  "function_call",
  "remote_cell_reference",
  "primitive_value",
  "function_body",
  "function_arguments",
  "function_argument",
  "quoted_string",
  "datetime",
  "time",
  "integer",
  "float",
  "text" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_5(val, _values, result)
        result = val[1]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_6(val, _values, result)
        ref = AST::DataFile.new(val.join)
    ref.body = val[1]
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_8(val, _values, result)
        ref = val[0]
    ref.add_row(val[1])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_9(val, _values, result)
       ref = AST::DataBody.new(val.join)
   ref.add_row(val[0])
   result = ref
 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values, result)
        ref = val[0]
    ref.add_cell(val[1])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values, result)
        ref = AST::DataRow.new(val.join)
    ref.add_cell(val[0])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_13(val, _values, result)
        ref = AST::DataCell.new(val.join)
    ref.cell_value = val[0]
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_14(val, _values, result)
        ref = val[0]
    ref.add_pair(val[1])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values, result)
        ref = AST::Map.new(val.join)
    ref.add_pair(val[0])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_16(val, _values, result)
        ref = AST::KeyValuePair.new(val.join)
    key_with_colon = val[0]
    key_without_colon = key_with_colon[0..(key_with_colon.length-2)]

    ref.hash_key = key_without_colon
    ref.hash_value = val[1]
    result = ref
  
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_19(val, _values, result)
        ref = AST::FormulaBody.new(val.join)
    ref.body = val[1]
    result = ref
  
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_23(val, _values, result)
        ref = AST::FunctionCall.new(val.join)
    ref.name = val[0]
    ref.arguments = Array(val[2]).compact.flatten
    result = ref
  
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_25(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_26(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_27(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_31(val, _values, result)
          ref = AST::CellReference.new(val.join)
      ref.sheet_name = val[0]
      ref.cell_name = val[2]
      result = ref
    
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_37(val, _values, result)
        strings = val.map do |v|
      v.respond_to?(:string) ? v.string : v
    end

    result = AST::UnquotedString.new(strings.join)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 115)
  def _reduce_38(val, _values, result)
        ref = if val[0].is_a?(AST::BaseAST)
      val[0]
    else
      AST::UnquotedString.new(val.join)
    end

    result = ref
  
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_44(val, _values, result)
     result = AST::QuotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_45(val, _values, result)
     result = AST::DateTime.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_46(val, _values, result)
     result = AST::UnquotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_47(val, _values, result)
     result = AST::PrimitiveFloat.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_48(val, _values, result)
     result = AST::PrimitiveInteger.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 131)
  def _reduce_49(val, _values, result)
     result = AST::UnquotedString.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module NewExcel
