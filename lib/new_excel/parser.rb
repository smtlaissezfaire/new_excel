#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
module NewExcel
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 89)

  def parse(str)
    @q = Tokenizer.get_tokens(str)
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(*args)
    $stderr.puts "on_error called: args=#{args.inspect}"
    super
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,    36,    35,     8,    37,    33,    27,    17,    13,    45,
    14,    15,    16,    32,    14,    15,    16,    27,    46,    21,
    21,    27,    47,   nil,    32,    14,    15,    16,    32,    14,
    15,    16,     8,   nil,   nil,   nil,   nil,    13,   nil,    14,
    15,    16,    13,   nil,    14,    15,    16 ]

racc_action_check = [
     0,    27,    20,     0,    27,    17,    47,     1,     0,    37,
     0,     0,     0,    47,    47,    47,    47,     8,    39,     5,
    18,    36,    40,   nil,     8,     8,     8,     8,    36,    36,
    36,    36,    35,   nil,   nil,   nil,   nil,    35,   nil,    35,
    35,    35,     7,   nil,     7,     7,     7 ]

racc_action_pointer = [
    -2,     7,   nil,   nil,   nil,    15,   nil,    32,    13,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,    16,   nil,
    -1,   nil,   nil,   nil,   nil,   nil,   nil,    -5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27,    17,     5,   nil,    11,
    14,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil ]

racc_action_default = [
   -38,   -38,    -1,    -2,    -3,   -38,    -9,   -10,   -38,   -29,
   -30,   -31,   -32,   -33,   -35,   -36,   -37,   -38,    -4,    -6,
   -38,    -8,   -28,   -11,   -12,   -13,   -14,   -38,   -24,   -25,
   -26,   -27,   -34,    49,    -5,   -38,   -16,   -38,    -7,   -38,
   -17,   -19,   -20,   -21,   -22,   -23,   -15,   -38,   -18 ]

racc_goto_table = [
    29,    30,    31,     3,    19,    41,    25,    26,    39,    40,
     1,    22,     2,     4,    18,    23,    48,    34,    24,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,    30,
    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,    29,
    30,    31 ]

racc_goto_check = [
    18,    19,    20,     3,     6,    16,    12,    13,    14,    15,
     1,    21,     2,     4,     5,    10,    16,     6,    11,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    19,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,    18,
    19,    20 ]

racc_goto_pointer = [
   nil,    10,    12,     3,    13,     9,    -1,   nil,   nil,   nil,
     7,    10,    -2,    -1,   -28,   -27,   -31,   nil,    -8,    -7,
    -6,     4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,     6,     7,
   nil,    42,    43,    44,   nil,   nil,   nil,    28,    10,    12,
    11,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  1, 17, :_reduce_none,
  2, 19, :_reduce_4,
  2, 20, :_reduce_5,
  1, 20, :_reduce_6,
  3, 21, :_reduce_7,
  1, 22, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  2, 23, :_reduce_11,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  4, 26, :_reduce_15,
  0, 29, :_reduce_none,
  1, 29, :_reduce_17,
  3, 30, :_reduce_18,
  1, 30, :_reduce_19,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  3, 27, :_reduce_23,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  2, 24, :_reduce_28,
  1, 24, :_reduce_29,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 32, :_reduce_34,
  1, 33, :_reduce_35,
  1, 35, :_reduce_36,
  1, 34, :_reduce_37 ]

racc_reduce_n = 38

racc_shift_n = 49

racc_token_table = {
  false => 0,
  :error => 1,
  :MAP => 2,
  :COLON => 3,
  :ID => 4,
  :EQ => 5,
  :OPEN_PAREN => 6,
  :CLOSE_PAREN => 7,
  :COMMA => 8,
  :DOT => 9,
  :TEXT => 10,
  :QUOTED_STRING => 11,
  :DATE_TIME => 12,
  :FLOAT => 13,
  :INTEGER => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "MAP",
  "COLON",
  "ID",
  "EQ",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "COMMA",
  "DOT",
  "TEXT",
  "QUOTED_STRING",
  "DATE_TIME",
  "FLOAT",
  "INTEGER",
  "$start",
  "root",
  "file",
  "cell_contents",
  "map",
  "key_value_pairs",
  "key_value_pair",
  "key",
  "formula",
  "primitive",
  "formula_body",
  "function_call",
  "remote_cell_reference",
  "primitive_value",
  "function_body",
  "function_arguments",
  "function_argument",
  "quoted_string",
  "datetime",
  "integer",
  "float",
  "any_primitive_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_4(val, _values, result)
        result = val[1]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_5(val, _values, result)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_6(val, _values, result)
        ref = AST::Map.new(val.join)
    ref.add_pair(val[0])
    result = ref
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_7(val, _values, result)
        ref = AST::KeyValuePair.new(val.join)
    ref.hash_key = val[0].to_sym
    ref.hash_value = val[2]
    result = ref
  
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_11(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_15(val, _values, result)
        ref = AST::FunctionCall.new(val.join)
    ref.name = val[0]
    ref.arguments = Array(val[2]).compact.flatten
    result = ref
  
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_17(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_18(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_23(val, _values, result)
          ref = AST::CellReference.new(val.join)
      ref.sheet_name = val[0]
      ref.cell_name = val[2]
      result = ref
    
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_28(val, _values, result)
          strings = val.map do |v|
        v.respond_to?(:string) ? v.string : v
      end

      result = AST::UnquotedString.new(strings.join)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_29(val, _values, result)
          ref = if val[0].is_a?(AST::BaseAST)
        val[0]
      else
        AST::UnquotedString.new(val.join)
      end

      result = ref
    
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_34(val, _values, result)
     result = AST::QuotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_35(val, _values, result)
     result = AST::DateTime.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_36(val, _values, result)
     result = AST::PrimitiveFloat.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_37(val, _values, result)
     result = AST::PrimitiveInteger.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module NewExcel
