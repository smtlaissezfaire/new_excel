#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
module NewExcel
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 65)

  def parse(str)
    @q = Tokenizer.get_tokens(str)
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(*args)
    $stderr.puts "on_error called: args=#{args.inspect}"
    super
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,    26,    25,    13,    27,    19,     9,    34,    10,    11,
    12,    24,    10,    11,    12,    19,    35,    36,   nil,    19,
   nil,    24,    10,    11,    12,    24,    10,    11,    12,     9,
   nil,    10,    11,    12 ]

racc_action_check = [
     0,    19,    13,     1,    19,    36,     0,    27,     0,     0,
     0,    36,    36,    36,    36,     4,    28,    29,   nil,    26,
   nil,     4,     4,     4,     4,    26,    26,    26,    26,     3,
   nil,     3,     3,     3 ]

racc_action_pointer = [
    -2,     3,   nil,    21,    12,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,    -3,
   nil,   nil,   nil,   nil,   nil,   nil,    16,     4,    11,    11,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil ]

racc_action_default = [
   -30,   -30,    -1,    -2,   -30,   -21,   -22,   -23,   -24,   -25,
   -27,   -28,   -29,   -30,   -20,    -3,    -4,    -5,    -6,   -30,
   -16,   -17,   -18,   -19,   -26,    38,    -8,   -30,   -30,    -9,
   -11,   -12,   -13,   -14,   -15,    -7,   -30,   -10 ]

racc_goto_table = [
    30,     6,     8,     7,     6,     8,     7,    17,     5,    18,
    37,    14,     1,    29,    28,     2,     3,    15,    16 ]

racc_goto_check = [
    10,    12,    13,    14,    12,    13,    14,     6,    15,     7,
    10,    15,     1,     9,     8,     2,     3,     4,     5 ]

racc_goto_pointer = [
   nil,    12,    15,    16,    13,    14,     3,     5,   -12,   -13,
   -26,   nil,     1,     2,     3,     8 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    31,    32,    33,   nil,   nil,
   nil,    20,    21,    22,    23,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  2, 15, :_reduce_3,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  4, 18, :_reduce_7,
  0, 21, :_reduce_none,
  1, 21, :_reduce_9,
  3, 22, :_reduce_10,
  1, 22, :_reduce_11,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  1, 23, :_reduce_none,
  3, 19, :_reduce_15,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  2, 16, :_reduce_20,
  1, 16, :_reduce_21,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 24, :_reduce_26,
  1, 25, :_reduce_27,
  1, 27, :_reduce_28,
  1, 26, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 38

racc_token_table = {
  false => 0,
  :error => 1,
  :EQ => 2,
  :ID => 3,
  :OPEN_PAREN => 4,
  :CLOSE_PAREN => 5,
  :COMMA => 6,
  :DOT => 7,
  :TEXT => 8,
  :QUOTED_STRING => 9,
  :DATE_TIME => 10,
  :FLOAT => 11,
  :INTEGER => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EQ",
  "ID",
  "OPEN_PAREN",
  "CLOSE_PAREN",
  "COMMA",
  "DOT",
  "TEXT",
  "QUOTED_STRING",
  "DATE_TIME",
  "FLOAT",
  "INTEGER",
  "$start",
  "root",
  "formula",
  "primitive",
  "formula_body",
  "function_call",
  "remote_cell_reference",
  "primitive_value",
  "function_body",
  "function_arguments",
  "function_argument",
  "quoted_string",
  "datetime",
  "integer",
  "float",
  "any_primitive_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_3(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_7(val, _values, result)
        ref = AST::FunctionCall.new(val.join)
    ref.name = val[0]
    ref.arguments = Array(val[2]).compact.flatten
    result = ref
  
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_9(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_10(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_15(val, _values, result)
          ref = AST::CellReference.new(val.join)
      ref.sheet_name = val[0]
      ref.cell_name = val[2]
      result = ref
    
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_20(val, _values, result)
          strings = val.map do |v|
        v.respond_to?(:string) ? v.string : v
      end

      result = AST::UnquotedString.new(strings.join)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_21(val, _values, result)
          ref = if val[0].is_a?(AST::BaseAST)
        val[0]
      else
        AST::UnquotedString.new(val.join)
      end

      result = ref
    
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_26(val, _values, result)
     result = AST::QuotedString.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_27(val, _values, result)
     result = AST::DateTime.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_28(val, _values, result)
     result = AST::PrimitiveFloat.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_29(val, _values, result)
     result = AST::PrimitiveInteger.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module NewExcel
