built_in_functions: true

square: (x)
  = multiply(x, x)

add: lambda(list,
  zipped_lists(list,
    lambda(list,
      inject(list, quote(+)))))

sum: add

subtract: lambda(list,
  zipped_lists(list,
    lambda(list,
      inject(list, quote(-)))))

multiply: lambda(list,
  zipped_lists(list,
    lambda(list,
      inject(list, quote(*)))))


# def divide(*list)
#   zipped_lists(list) do |num, denom|
#     primitive_infix(:/, num, primitive_method_call(denom, :to_f))
#   end
# end

divide: lambda(list,
  zipped_lists(list,
    (num, denom)
      = primitive_infix(quote(/),
                      num,
                      primitive_method_call(denom, quote(to_f)))))

average: lambda(args,
  divide(apply("sum", args),
         length(args)))
