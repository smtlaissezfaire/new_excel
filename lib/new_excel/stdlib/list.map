# def concat(*args)
#   zipped_lists(args, &:join)
# end

concat:
  lambda(args,
    # would be nice to use symbol_to_proc() here
    zipped_lists(args, lambda(list,
      primitive_method_call(list, quote(join)))))

countif: (list, item)
  = sum(
      if(eq(list, item),
         1,
         0))

# TODO:
# is_list: (list)
#   = primitive_method_call(list, quote(is_a?), primitive_class(quote(Array)))

empty?: (lst)
  = eq(length(lst), 0)

in?: (lst, item)
  = if (empty?(lst),
       false,
       if (eq(car(lst), item), true,
           in?(cdr(lst), item)))

includes?: (lst, item)
  = if(is_list(item),
       progn(
         define(fn, (lst_item)
            = in?(item, lst_item)),
         map(fn, lst)
       ),
       in?(lst, item))

indexOf: (list, match)
  = progn(
    val: primitive_method_call(list, quote(index), match),
    if(val, add(val, 1), false))


vlookup: (list1, match, list2)
  = if (is_list(match),
        # TODO: This should work
        # map(vlookup, match),
        progn(
          define(fn, (match)
            = vlookup(list1, match, list2)
          ),
          map(fn, match)
        ),
        progn(
          val: indexOf(list1, match),
          if(val, index(list2, val), "")
        ))


last: lambda(list,
  each_list(list, lambda(list,
    primitive_method_call(list, quote(last)))))
