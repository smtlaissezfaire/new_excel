built_in_functions: true

square: (x)
  = multiply(x, x)

_inject_zipped_list_symbol: (symbol)
  = lambda(list,
      zipped_lists(list,
        lambda(list,
          inject(list, symbol))))

add: _inject_zipped_list_symbol(quote(+))

sum:
  lambda(list,
    if (and(is_list(list),
            eq(length(list), 1)),
        apply("add", index(list, 1)),
        apply("add", list)))


subtract: _inject_zipped_list_symbol(quote(-))

multiply: _inject_zipped_list_symbol(quote(*))

# def divide(*list)
#   zipped_lists(list) do |num, denom|
#     primitive_infix(:/, num, primitive_method_call(denom, :to_f))
#   end
# end

divide: lambda(list,
  zipped_lists(list,
    (num, denom)
      = primitive_infix(quote(/),
                        primitive_method_call(num, quote(to_f)),
                        primitive_method_call(denom, quote(to_f)))))

average: lambda(args,
  divide(apply("add", args),
         length(args)))
